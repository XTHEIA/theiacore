plugins {
    id 'java'
    id 'maven-publish'
}

group = 'kr.sbxt.theia'
version = '0.0'



repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
}

def file = new File('core.version');
int previous = Integer.parseInt(file.text)
int build = previous + 1
file.write(build.toString())

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/XTHEIA/theiacore")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }


    def publishName = 'THEIA Plugin Core'
    def publishDesc = 'Published at ' + LocalDateTime.now().format("yyyy.MM.dd HH:mm:ss");
    publications {
        gpr(MavenPublication) {
            description = publishDesc
            from(components.java)
            version('b' + version + '.' + build)
            pom {
                name = publishName
                description = publishDesc
            }
        }
    }
}
def targetJavaVersion = 17

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
javadoc {
    options.encoding = 'UTF-8'
}

java {
    withSourcesJar()
    withJavadocJar()
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}


tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}


processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
