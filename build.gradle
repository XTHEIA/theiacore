plugins {
    id 'java'
    id 'maven-publish'
}

group = 'kr.sbxt.xtheia.theia'
version = '1.0'



//repositories {
//    mavenCentral()
//    maven {
//        name = 'papermc-repo'
//        url = 'https://repo.papermc.io/repository/maven-public/'
//    }
//    maven {
//        name = 'sonatype'
//        url = 'https://oss.sonatype.org/content/groups/public/'
//    }
//}
//
//dependencies {
//    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
//}


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/XTHEIA/theiacore")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {

            def file = new File('core.version');
            int previous = Integer.parseInt(file.text)
            int build = previous + 1
            file.write(build.toString())

            def publishName = 'THEIA Plugin Core'
            def publishDesc = 'Built at ' + LocalDateTime.now().format("yyyy.MM.dd HH:mm:ss");

            from(components.java)

            version('b' + version + '.' + build)
            description(publishDesc)

            pom {

                name = publishName
                description = publishDesc

                scm {
                    connection = 'scm:git:https://github.com/XTHEIA/theiacore.git'
                    url = 'https://github.com/XTHEIA/theiacore'
                    developerConnection = 'https://github.com/XTHEIA/theiacore'
                }
            }


        }
    }
}
def targetJavaVersion = 17

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
javadoc {
    options.encoding = 'UTF-8'
}

java {

    withSourcesJar()
    withJavadocJar()
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}


tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}
